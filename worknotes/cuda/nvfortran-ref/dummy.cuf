<span class="fstd">program</span> directTransfer

    <span class="fstd">use</span> <span class="fnv">cudafor</span>

    <span class="fstd">implicit</span> <span class="fstd">none</span>
    <span class="fstd">integer</span>, <span class="fstd">parameter</span>:: N = 4*1024*1024
    <span class="fstd">real</span>, <span class="fnv">pinned</span>, <span class="fstd">allocatable</span>:: a(:), b(:)
    <span class="fstd">real</span>, <span class="fnv">device</span>, <span class="fstd">allocatable</span>:: a_d(:), b_d(:)

    <span class="fcomment">! these hold free and total memory before and after</span>
    <span class="fcomment">! allocation, used to verify allocation is happening</span>
    <span class="fcomment">! on proper devices</span>
    <span class="fstd">integer</span>(<span class="fnv">int_ptr_kind</span>()), <span class="fstd">allocatable</span>:: freeBefore(:), totalBefore(:), freeAfter(:), totalAfter(:)
    <span class="fstd">integer</span>:: istat, nDevices, i, accessPeer, timingDev
    <span class="fstd">type</span>(<span class="fnv">cudaDeviceProp</span>):: prop
    <span class="fstd">type</span>(<span class="fnv">cudaEvent</span>):: startEvent, stopEvent
    <span class="fstd">real</span>:: time

    <span class="fcomment">! <span class="fstd">allocate</span> host arrays</span>
    <span class="fstd">allocate</span>(a(N), b(N))
    <span class="fstd">allocate</span>(freeBefore(0: nDevices-1), totalBefore(0: nDevices-1))
    <span class="fstd">allocate</span>(freeAfter(0: nDevices-1), totalAfter(0: nDevices-1))

    <span class="fcomment">! get <span class="fnv">device</span> info(including total and free memory)</span>
    <span class="fcomment">! before allocating a_d and b_d on devices 0 and 1</span>
    istat = <span class="fnv">cudaGetDeviceCount</span>(nDevices)
    <span class="fstd">if</span>(nDevices < 2) <span class="fstd">then</span>
        <span class="fstd">write</span>(*,*) <span class="fstring">'Need at least two CUDA capable devices '</span>
        stop
    <span class="fstd">end</span> <span class="fstd">if</span>
    <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">'Number of CUDA -capable devices: '</span>, i0,/)"</span>) nDevices
    <span class="fstd">do</span> i = 0, nDevices-1
        istat = <span class="fnv">cudaGetDeviceProperties</span>(prop, i)
        istat = <span class="fnv">cudaSetDevice</span>(i)
        istat = <span class="fnv">cudaMemGetInfo</span>(freeBefore(i), totalBefore(i))
    <span class="fstd">end</span> <span class="fstd">do</span>
    istat = <span class="fnv">cudaSetDevice</span>(0)
    <span class="fstd">allocate</span>(a_d(N))
    istat = <span class="fnv">cudaSetDevice</span>(1)
    <span class="fstd">allocate</span>(b_d(N))

    <span class="fcomment">! print out free memory before and after allocation</span>
    <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">'Allocation summary '</span>)"</span>)
    <span class="fstd">do</span> i = 0, nDevices-1
        istat = <span class="fnv">cudaGetDeviceProperties</span>(prop, i)
        <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">' Device '</span>, i0, <span class="fstring">': '</span>, a)"</span>) i, <span class="fintrinsic">trim</span>(prop%name)
        istat = <span class="fnv">cudaSetDevice</span>(i)
        istat = <span class="fnv">cudaMemGetInfo</span>(freeAfter(i), totalAfter(i))
        <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">' Free memory before: '</span>, i0, <span class="fstring">', after: '</span>, i0, <span class="fstring">', difference: '</span>,i0,/)"</span>) &
            freeBefore(i), freeAfter(i), freeBefore(i)-freeAfter(i)
    <span class="fstd">end</span> <span class="fstd">do</span>

    <span class="fcomment">! check whether devices 0 and 1 can <span class="fstd">use</span> P2P</span>
    <span class="fstd">if</span>(nDevices > 1) <span class="fstd">then</span>
        istat = <span class="fnv">cudaDeviceCanAccessPeer</span>(accessPeer, 0, 1)
        <span class="fstd">if</span>(accessPeer == 1) <span class="fstd">then</span>
            <span class="fstd">write</span>(*,*) <span class="fstring">'Peer access available between 0 and 1'</span>
        <span class="fstd">else</span>
            <span class="fstd">write</span>(*,*) <span class="fstring">'Peer access not available between 0 and 1'</span>
        <span class="fstd">end</span> <span class="fstd">if</span>
    <span class="fstd">end</span> <span class="fstd">if</span>

    <span class="fcomment">! initialize</span>
    a = 1.0
    istat = <span class="fnv">cudaSetDevice</span>(0)
    a_d = a
    <span class="fcomment">! perform test twice, timing on both sending GPU</span>
    <span class="fcomment">! and receiving GPU</span>
    <span class="fstd">do</span> timingDev = 0, 1
        <span class="fstd">write</span>(*,<span class="fstring">"(/,<span class="fstring">'Timing on <span class="fnv">device</span> '</span>, i0, /)"</span>) timingDev

        <span class="fcomment">! create events on the timing <span class="fnv">device</span></span>
        istat = <span class="fnv">cudaSetDevice</span>(timingDev)
        istat = <span class="fnv">cudaEventCreate</span>(startEvent)
        istat = <span class="fnv">cudaEventCreate</span>(stopEvent)

        <span class="fstd">if</span>(accessPeer == 1) <span class="fstd">then</span>
            <span class="fcomment">! enable P2P communication</span>
            istat = <span class="fnv">cudaSetDevice</span>(0)
            istat = <span class="fnv">cudaDeviceEnablePeerAccess</span>(1, 0)
            istat = <span class="fnv">cudaSetDevice</span>(1)
            istat = <span class="fnv">cudaDeviceEnablePeerAccess</span>(0, 0)

            <span class="fcomment">! transfer(implicitly) across devices</span>
            b_d = -1.0
            istat = <span class="fnv">cudaSetDevice</span>(timingDev)
            istat = <span class="fnv">cudaEventRecord</span>(startEvent,0)
            b_d = a_d
            istat = <span class="fnv">cudaEventRecord</span>(stopEvent,0)
            istat = <span class="fnv">cudaEventSynchronize</span>(stopEvent)
            istat = <span class="fnv">cudaEventElapsedTime</span>(time, startEvent, stopEvent)
            b = b_d
            <span class="fstd">if</span>(<span class="fintrinsic">any</span>(b /= a)) <span class="fstd">then</span>
                <span class="fstd">write</span>(*,<span class="fstring"><span class="fstring"><span class="fstring">"(<span class="fstring"><span class="fstring"><span class="fstring">'Transfer failed '</span></span></span>)"</span></span></span>)
            <span class="fstd">else</span>
                <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">'b_d=a_d transfer(GB/s): '</span>, f)"</span>) N*4/time/1.0E+6
            <span class="fstd">end</span> <span class="fstd">if</span>
        <span class="fstd">end</span> <span class="fstd">if</span>

        <span class="fcomment">! transfer via <span class="fnv">cudaMemcpyPeer</span>()</span>
        <span class="fstd">if</span>(accessPeer == 0) istat = <span class="fnv">cudaSetDevice</span>(1)
        b_d = -1.0

        istat = <span class="fnv">cudaSetDevice</span>(timingDev)
        istat = <span class="fnv">cudaEventRecord</span>(startEvent,0)
        istat = <span class="fnv">cudaMemcpyPeer</span>(b_d, 1, a_d, 0, N)
        istat = <span class="fnv">cudaEventRecord</span>(stopEvent,0)
        istat = <span class="fnv">cudaEventSynchronize</span>(stopEvent)
        istat = <span class="fnv">cudaEventElapsedTime</span>(time, startEvent, stopEvent)
        <span class="fstd">if</span>(accessPeer == 0) istat = <span class="fnv">cudaSetDevice</span>(1)
        b = b_d
        <span class="fstd">if</span>(<span class="fintrinsic">any</span>(b /= a)) <span class="fstd">then</span>
            <span class="fstd">write</span>(*,<span class="fstring"><span class="fstring"><span class="fstring">"(<span class="fstring"><span class="fstring"><span class="fstring">'Transfer failed '</span></span></span>)"</span></span></span>)
        <span class="fstd">else</span>
            <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">'cudaMemcpyPeer transfer(GB/s): '</span>, f)"</span>) N*4/time/1.0E+6
        <span class="fstd">end</span> <span class="fstd">if</span>

        <span class="fcomment">! cudaMemcpyPeer with P2P disabled</span>
        <span class="fstd">if</span>(accessPeer == 1) <span class="fstd">then</span>
            istat = <span class="fnv">cudaSetDevice</span>(0)
            istat = <span class="fnv">cudaDeviceDisablePeerAccess</span>(1)
            istat = <span class="fnv">cudaSetDevice</span>(1)
            istat = <span class="fnv">cudaDeviceDisablePeerAccess</span>(0)
            b_d = -1.0
            istat = <span class="fnv">cudaSetDevice</span>(timingDev)
            istat = <span class="fnv">cudaEventRecord</span>(startEvent,0)
            istat = <span class="fnv">cudaMemcpyPeer</span>(b_d, 1, a_d, 0, N)
            istat = <span class="fnv">cudaEventRecord</span>(stopEvent,0)
            istat = <span class="fnv">cudaEventSynchronize</span>(stopEvent)
            istat = <span class="fnv">cudaEventElapsedTime</span>(time, startEvent, stopEvent)
            istat = <span class="fnv">cudaSetDevice</span>(1)
            b = b_d
            <span class="fstd">if</span>(<span class="fintrinsic">any</span>(b /= a)) <span class="fstd">then</span>
                <span class="fstd">write</span>(*,<span class="fstring"><span class="fstring"><span class="fstring">"(<span class="fstring"><span class="fstring"><span class="fstring">'Transfer failed '</span></span></span>)"</span></span></span>)
            <span class="fstd">else</span>
                <span class="fstd">write</span>(*,<span class="fstring">"(<span class="fstring">'cudaMemcpyPeer transfer w/ P2P '</span>, <span class="fstring">' disabled(GB/s): '</span>, f)"</span>) N*4/time/1.0E+6
            <span class="fstd">end</span> <span class="fstd">if</span>
        <span class="fstd">end</span> <span class="fstd">if</span>
        
        <span class="fcomment">! destroy events associated with timingDev</span>
        istat = <span class="fnv">cudaEventDestroy</span>(startEvent)
        istat = <span class="fnv">cudaEventDestroy</span>(stopEvent)
    <span class="fstd">end</span> <span class="fstd">do</span>

    <span class="fcomment">! clean up</span>
    <span class="fstd">deallocate</span>(freeBefore, totalBefore, freeAfter, totalAfter)
    <span class="fstd">deallocate</span>(a, b, a_d, b_d)

<span class="fstd">end</span> <span class="fstd">program</span> directTransfer
