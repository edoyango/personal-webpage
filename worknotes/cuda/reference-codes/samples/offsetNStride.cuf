module kernels_m

    use precision_m

contains

    attributes(global) subroutine offset(a, s)

        real(f):: a(*)
        integer, value:: s
        integer:: i
        i = blockDim%x*(blockIdx%x-1)+ threadIdx%x + s
        a(i) = a(i) + 1._f

    end subroutine offset

    attributes(global) subroutine stride(a, s)

        real(f):: a(*)
        integer, value:: s
        integer:: i
        i = (blockDim%x*(blockIdx%x-1)+ threadIdx%x) * s
        a(i) = a(i) + 1._f

    end subroutine stride

end module kernels_m

program offsetNStride

    use cudafor
    use kernels_m

    implicit none
    integer, parameter:: nMB = 4 ! transfer size in MB
    integer, parameter:: n = nMB*1024*1024/f
    integer, parameter:: blockSize = 256

    ! array dimensions are 33*n for stride cases
    real(f), device:: a_d(33*n), b_d(33*n)
    type(cudaEvent):: startEvent, stopEvent
    type(cudaDeviceProp):: prop
    integer:: i, istat
    real:: time

    istat = cudaGetDeviceProperties(prop, 0)
    write(*,'(/," Device: ",a)') trim(prop%name)
    write(*,'(" Transfer size (MB): ",i0)') nMB
    if (kind(a_d) == sf) then
        write(*,'(a,/)') 'Single Precision '
    else
        write(*,'(a,/)') 'Double Precision '
    end if

    istat = cudaEventCreate(startEvent)
    istat = cudaEventCreate(stopEvent)

    write(*,*) 'Offset, Bandwidth (GB/s):'
    call offset <<<n/blockSize,blockSize >>>(b_d, 0)
    do i = 0, 32
        a_d = 0._f
        istat = cudaEventRecord(startEvent,0)
        call offset <<<n/blockSize,blockSize >>>(a_d, i)
        istat = cudaEventRecord(stopEvent,0)
        istat = cudaEventSynchronize(stopEvent)
        istat = cudaEventElapsedTime(time, startEvent, &
        stopEvent)
        write(*,*) i, 2*n*f/time *1.e-6
    end do

    write(*,*)
    write(*,*) 'Stride, Bandwidth (GB/s):'
    call stride <<<n/blockSize,blockSize >>>(b_d, 1)
    do i = 1, 32
        a_d = 0._f
        istat = cudaEventRecord(startEvent,0)
        call stride <<<n/blockSize,blockSize >>>(a_d, i)
        istat = cudaEventRecord(stopEvent,0)
        istat = cudaEventSynchronize(stopEvent)
        istat = cudaEventElapsedTime(time, startEvent, &
        stopEvent)
        write(*,*) i, 2*n*f/time*1.e-6
    end do

    write(*,*) 

    istat = cudaEventDestroy(startEvent)
    istat = cudaEventDestroy(stopEvent)

end program offsetNStride